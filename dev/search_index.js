var documenterSearchIndex = {"docs":
[{"location":"tr/transient/#Transient-Responses","page":"Overview","title":"Transient Responses","text":"","category":"section"},{"location":"tr/transient/","page":"Overview","title":"Overview","text":"\"In general, transient responses are evoked by stimuli that occur infrequently (in theory, only once), and steady-state responses are evoked by stimuli that occur more rapidly.\" Picton (2002)","category":"page"},{"location":"tr/transient/","page":"Overview","title":"Overview","text":"There is a wide variety of transient neurophysiological measures. Within the auditory field these are commonly delineated by their latency and anatomical source location. Fast (2-20 ms) responses are often described as auditory brainstem response. Middle (10-100 ms) are commonly termed middle latency responses or midbrain evoked potentials. And slow cortical responses (50-300 ms) are commonly called P1-N1-P2 complexes. There is also late responses (150-1000 ms) which are also cortical in nature and include mismatched negativity responses, P300, N400, P600 responses.","category":"page"},{"location":"tr/transient/","page":"Overview","title":"Overview","text":"I assume things are similar for other cognitive fields, but given how us researchers don't talk outside our circles, they probably have different naming.","category":"page"},{"location":"assr/functions/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"assr/functions/","page":"API","title":"API","text":"In addition to the function available for processing EEG data, a number of functions are provided specifically for the processing of SSR data","category":"page"},{"location":"assr/functions/#Import","page":"API","title":"Import","text":"","category":"section"},{"location":"assr/functions/","page":"API","title":"API","text":"read_SSR","category":"page"},{"location":"assr/functions/#Neuroimaging.read_SSR","page":"API","title":"Neuroimaging.read_SSR","text":"Read SSR from file or IO stream\n\nRead a file or IO stream and store the data in an SSR type.\n\nMatching .mat files are read and modulation frequency information extracted. Failing that, user passed arguments are used or the modulation frequency is extracted from the file name.\n\nArguments\n\nfname: Name of the file to be read\nmin_epoch_length: Minimum epoch length in samples. Shorter epochs will be removed (0)\nmax_epoch_length: Maximum epoch length in samples. Longer epochs will be removed (0 = all)\nvalid_triggers: Triggers that are considered valid, others are removed ([1,2])\nstimulation_amplitude: Amplitude of stimulation (NaN)\nmodulationrate: Modulation frequency of SSR stimulation (NaN)\ncarrier_frequency: Carrier frequency (NaN)\nparticipant_name: Name of participant (\"\")\nremove_first: Number of epochs to be removed from start of recording (0)\nmax_epochs: Maximum number of epochs to retain (0 = all)\nenv (nothing)\nbkt (\"\")\n\nSupported file formats\n\nBIOSEMI (.bdf)\n\n\n\n\n\n","category":"function"},{"location":"assr/functions/#Filtering","page":"API","title":"Filtering","text":"","category":"section"},{"location":"assr/functions/","page":"API","title":"API","text":"filter_highpass(::SSR)\nfilter_lowpass(::SSR)\nfilter_bandpass(::SSR)\ndownsample(s::SSR, ratio::Rational)","category":"page"},{"location":"assr/functions/#Neuroimaging.filter_highpass-Tuple{SSR}","page":"API","title":"Neuroimaging.filter_highpass","text":"filter_highpass(a::SSR; cutOff::Real=2, fs::Real=samplingrate(a), order::Int=3, tolerance::Real=0.01, kwargs...)\n\nApplly a high pass filter.\n\nA zero phase high pass filter is applied to the data using filtfilt. A check is performed to ensure the filter does not affect the modulation rate. The filter coefficents are stored in the processing field.\n\nExamples\n\na = read_SSR(fname)\nb = filter_highpass(a)\nc = filter_highpass(a, cutOff = 1)\n\n\n\n\n\n","category":"method"},{"location":"assr/functions/#Neuroimaging.filter_lowpass-Tuple{SSR}","page":"API","title":"Neuroimaging.filter_lowpass","text":"filter_lowpass(a::SSR; cutOff::Real=150, fs::Real=samplingrate(a), order::Int=3, tolerance::Real=0.01, kwargs...)\n\nApplly a low pass filter.\n\nA zero phase high pass filter is applied to the data using filtfilt. A check is performed to ensure the filter does not affect the modulation rate. The filter coefficents are stored in the processing field.\n\nExamples\n\na = read_SSR(fname)\nb = filter_lowpass(a)\nc = filter_lowpass(a, cutOff = 1)\n\n\n\n\n\n","category":"method"},{"location":"assr/functions/#Neuroimaging.filter_bandpass-Tuple{SSR}","page":"API","title":"Neuroimaging.filter_bandpass","text":"filter_bandpass(a::SSR; lower::Number=modulationrate(a) - 1, upper::Number=modulationrate(a) + 1, fs::Real=samplingrate(a), n::Int=24, rp::Number = 0.0001, tolerance::Real=0.01, kwargs...)\n\nApplly a band pass filter. A check is performed to ensure the filter does not affect the modulation rate. The filter coefficents are stored in the processing field.\n\nExamples\n\na = read_SSR(fname)\na = filter_bandpass(a)\n\n\n\n\n\n","category":"method"},{"location":"assr/functions/#Neuroimaging.downsample-Tuple{SSR, Rational}","page":"API","title":"Neuroimaging.downsample","text":"downsample(s::SSR, ratio::Rational)\n\nDownsample signal by specified ratio.\n\n\n\n\n\n","category":"method"},{"location":"assr/functions/#Preprocessing","page":"API","title":"Preprocessing","text":"","category":"section"},{"location":"assr/functions/","page":"API","title":"API","text":"extract_epochs(::SSR)","category":"page"},{"location":"assr/functions/#Neuroimaging.extract_epochs-Tuple{SSR}","page":"API","title":"Neuroimaging.extract_epochs","text":"function extract_epochs(a::SSR; valid_triggers::Union{AbstractArray,Int} = [1, 2], remove_first::Int = 0, remove_last::Int = 0, kwargs...)\n\nExtract epoch data from SSR\n\nArguments\n\na: A SSR object\nvalid_triggers: Trigger numbers that are considered valid ([1,2])\nremove_first: Remove the first n triggers (0)\nremove_last: Remove the last n triggers (0)\n\nExamples\n\nepochs = extract_epochs(SSR, valid_triggers=[1,2])\n\n\n\n\n\n","category":"method"},{"location":"assr/functions/#Statistics","page":"API","title":"Statistics","text":"","category":"section"},{"location":"assr/functions/","page":"API","title":"API","text":"ftest(::SSR)","category":"page"},{"location":"assr/functions/#Neuroimaging.ftest-Tuple{SSR}","page":"API","title":"Neuroimaging.ftest","text":"ftest(s::SSR)\nftest(s::SSR; kwargs...)\n\nRun f-test statistics on steady state response measurement.\n\nArguments\n\nfreq_of_interest: Frequency to analyse for presence of a response\nside_freq: Adjacent frequencies above and below the frequency of interest used to quantify the noise\nID: Participant ID for storage in resulting dataframe\nspill_bins: Number of bins each side of the FFT bin of interes to ignore in noise computation\nresults_key: Dictionary key name to store results in s.processing\n\nExamples\n\ns = read_SSR(fname)\ns.modulationrate = 33.2u\"Hz\"\ns = ftest(s)\nprintln(s.processing['statistics'])\n\nReference\n\nHofmann, M., Wouters, J. Improved Electrically Evoked Auditory Steady-State Response Thresholds in Humans. JARO 13, 573–589 (2012). https://doi.org/10.1007/s10162-012-0321-8\n\nLuke, Robert, and Jan Wouters. \"Kalman filter based estimation of auditory steady state response parameters.\" IEEE Transactions on Neural Systems and Rehabilitation Engineering 25.3 (2016): 196-204.\n\n\n\n\n\n","category":"method"},{"location":"assr/functions/#Plotting","page":"API","title":"Plotting","text":"","category":"section"},{"location":"assr/functions/","page":"API","title":"API","text":"plot_spectrum(::SSR, ::Int)","category":"page"},{"location":"assr/functions/#Neuroimaging.plot_spectrum-Tuple{SSR, Int64}","page":"API","title":"Neuroimaging.plot_spectrum","text":"plot_spectrum(eeg::SSR, chan::Int; kwargs...)\nplot_spectrum(eeg::SSR, chan::AbstractString; kwargs...)\n\nPlot the spectrum of a steady state response measurement.\n\n\n\n\n\n","category":"method"},{"location":"eeg/eeg/#EEG","page":"Overview","title":"EEG","text":"","category":"section"},{"location":"eeg/eeg/","page":"Overview","title":"Overview","text":"Electroencephalography (EEG) is an electrophysiological monitoring method to record electrical activity on the scalp that has been shown to represent the macroscopic activity of the surface layer of the brain underneath. EEG measures voltage fluctuations resulting from ionic current within the neurons of the brain. Clinically, EEG refers to the recording of the brain's spontaneous electrical activity over a period of time, as recorded from multiple electrodes placed on the scalp. Diagnostic applications generally focus either on event-related potentials or on the spectral content of EEG. The former investigates potential fluctuations time locked to an event, such as 'stimulus onset' or 'button press'. The latter analyses the type of neural oscillations (popularly called \"brain waves\") that can be observed in EEG signals in the frequency domain. Wikipedia","category":"page"},{"location":"IO/#Input/Output","page":"Input/Output Support","title":"Input/Output","text":"","category":"section"},{"location":"IO/","page":"Input/Output Support","title":"Input/Output Support","text":"Functions are provided to read and write data in various formats.","category":"page"},{"location":"IO/#Readers","page":"Input/Output Support","title":"Readers","text":"","category":"section"},{"location":"IO/","page":"Input/Output Support","title":"Input/Output Support","text":"In addition to reading EEG data the following file reading functions are available.","category":"page"},{"location":"IO/","page":"Input/Output Support","title":"Input/Output Support","text":"CurrentModule = Neuroimaging","category":"page"},{"location":"IO/","page":"Input/Output Support","title":"Input/Output Support","text":"import_biosemi \nread_elp\nread_avr\nread_evt\nread_sfp\nread_dat\nread_bsa","category":"page"},{"location":"IO/#Neuroimaging.import_biosemi","page":"Input/Output Support","title":"Neuroimaging.import_biosemi","text":"Import Biosemi files\n\n\n\n\n\n","category":"function"},{"location":"IO/#Neuroimaging.read_elp","page":"Input/Output Support","title":"Neuroimaging.read_elp","text":"Read elp file containing sensor locations\n\nInput\n\nfname: Name or path for the sfp file\ncoordinate: Coordinate system for electrode location\nr: Radius for converting spherical coords\n\nOutput\n\nelecs: Array of electrode objects\n\n\n\n\n\n","category":"function"},{"location":"IO/#Neuroimaging.read_avr","page":"Input/Output Support","title":"Neuroimaging.read_avr","text":"Read AVR (.avr) file\n\nInput\n\nfname: Name or path for the AVR file\n\nOutput\n\ndata: Array of data read from AVR file. Each column represents a channel, and each row represents a point.\nchanNames: Channel Names\n\n\n\n\n\n","category":"function"},{"location":"IO/#Neuroimaging.read_evt","page":"Input/Output Support","title":"Neuroimaging.read_evt","text":"Read *.evt file and convert to form for EEG.jl\n\n\n\n\n\n","category":"function"},{"location":"IO/#Neuroimaging.read_sfp","page":"Input/Output Support","title":"Neuroimaging.read_sfp","text":"Read sfp file containing sensor locations\n\nInput\n\nfname: Path for the sfp file\n\nOutput\n\nelec: Electrodes object\n\n\n\n\n\n","category":"function"},{"location":"IO/#Neuroimaging.read_dat","page":"Input/Output Support","title":"Neuroimaging.read_dat","text":"Read dat files\n\nArguments\n\nfname: Name or path for the dat file\n\nReturns\n\nx: Range of x values\ny: Range of y values\nz: Range of z values\ncomplete_data: Array (x × y × z x t)\nsample_times\n\nReferences\n\nFile specs were taken from fieldtrip\n\n\n\n\n\n","category":"function"},{"location":"IO/#Neuroimaging.read_bsa","page":"Input/Output Support","title":"Neuroimaging.read_bsa","text":"Read Besa's BSA (.bsa) file\n\nInput\n\nfname: Name or path for the BSA file\n\nOutput\n\nbsa: Dipole object\n\n\n\n\n\n","category":"function"},{"location":"IO/#Writers","page":"Input/Output Support","title":"Writers","text":"","category":"section"},{"location":"IO/","page":"Input/Output Support","title":"Input/Output Support","text":"In addition to reading EEG data the following file reading functions are available.","category":"page"},{"location":"IO/","page":"Input/Output Support","title":"Input/Output Support","text":"write_avr","category":"page"},{"location":"IO/#Neuroimaging.write_avr","page":"Input/Output Support","title":"Neuroimaging.write_avr","text":"Write AVR file\n\n\n\n\n\n","category":"function"},{"location":"source/examples/#Source-Modelling","page":"Example","title":"Source Modelling","text":"","category":"section"},{"location":"source/examples/","page":"Example","title":"Example","text":"Neuroimaging.jl supports opening volume image data. In this example we open a .dat file as is exported by the BESA software.","category":"page"},{"location":"source/examples/","page":"Example","title":"Example","text":"Volume image data represents the estimated activity at each source location. The magnitude of the activity can be displayed in a figure (see below).","category":"page"},{"location":"source/examples/","page":"Example","title":"Example","text":"In this example we read data from an EEG distributed source analysis procedure run in the BESA software using the CLARA approach (Jordanov T., Hoechstetter K., Berg P., Paul-Jordanov I., Scherg M. CLARA: classical LORETA analysis recursively applied. F1000Posters. 2014;5:895.).","category":"page"},{"location":"source/examples/","page":"Example","title":"Example","text":"using DisplayAs, Plots # hide\nusing Neuroimaging\ndata_path = joinpath(\"..\", \"..\", \"..\", \"test\", \"data\", \"test-3d.dat\")\n\nt = read_VolumeImage(data_path)","category":"page"},{"location":"source/examples/#Plotting","page":"Example","title":"Plotting","text":"","category":"section"},{"location":"source/examples/","page":"Example","title":"Example","text":"Next we can view the volume image by calling the plot method on it. Note that each dot represents the distributed source activity at that location, in this location the estimates are in units nAm/cm^3.","category":"page"},{"location":"source/examples/","page":"Example","title":"Example","text":"Neuroimaging.plot(t)\ncurrent() |> DisplayAs.PNG # hide","category":"page"},{"location":"assr/assr/#ssr_intro","page":"Overview","title":"Introduction","text":"","category":"section"},{"location":"assr/assr/","page":"Overview","title":"Overview","text":"Auditory steady state-responses (ASSRs) are neural responses to periodic auditory stimuli (Picton, 2010). When a repetitive stimulus is perceived by the listener, EEG measurements contain increased activity at the repetition or modulation frequency (fm). The frequency specific nature of the response allows for truly objective response detection. The most common use of ASSRs is to obtain frequency specific hearing thresholds, this is achieved by reducing the stimulus intensity until no response is detected (Rance et al., 1995).  Luke 2016","category":"page"},{"location":"api/#Low-Level-Function-API","page":"Low-Level API","title":"Low-Level Function API","text":"","category":"section"},{"location":"api/","page":"Low-Level API","title":"Low-Level API","text":"As well as providing convenient types for analysis. This package also provides low-level functions for dealing with data in its raw form. These low-level functions are described below.","category":"page"},{"location":"api/","page":"Low-Level API","title":"Low-Level API","text":"Note: Currently sorting out the docs, so its a bit of a mess. Is there an automated way to list all functions using documenter?","category":"page"},{"location":"api/","page":"Low-Level API","title":"Low-Level API","text":"","category":"page"},{"location":"api/","page":"Low-Level API","title":"Low-Level API","text":"CurrentModule = Neuroimaging","category":"page"},{"location":"api/#Preprocessing","page":"Low-Level API","title":"Preprocessing","text":"","category":"section"},{"location":"api/#Filtering","page":"Low-Level API","title":"Filtering","text":"","category":"section"},{"location":"api/","page":"Low-Level API","title":"Low-Level API","text":"compensate_for_filter","category":"page"},{"location":"api/#Neuroimaging.compensate_for_filter","page":"Low-Level API","title":"Neuroimaging.compensate_for_filter","text":"compensate_for_filter(filter::FilterCoefficients, spectrum::AbstractArray, frequencies::AbstractArray, fs::Real)\n\nRecover the spectrum of signal by compensating for filtering done.\n\nArguments\n\nfilter: The filter used on the spectrum\nspectrum: Spectrum of signal\nfrequencies: Array of frequencies you want to apply the compensation to\nfs: Sampling rate\n\nReturns\n\nSpectrum of the signal after comensating for the filter\n\n\n\n\n\n","category":"function"},{"location":"api/#Referencing","page":"Low-Level API","title":"Referencing","text":"","category":"section"},{"location":"api/","page":"Low-Level API","title":"Low-Level API","text":"rereference\nremove_template","category":"page"},{"location":"api/#Neuroimaging.rereference","page":"Low-Level API","title":"Neuroimaging.rereference","text":"rereference(signals::Array{T,2}, refChan::Union{Int,Array{Int}}) where {T<:AbstractFloat}\nrereference(signals::Array{T,2}, refChan::Union{S,Array{S}}, chanNames::Vector{S}) where {S<:AbstractString}\n\nRe reference a signals to specific signal channel by index, or by channel name from supplied list.\n\nIf multiple channels are specififed, their average is used as the reference.\n\nArguments\n\nsignals: Original signals to be modified\nrefChan: Index or name of channels to be used as reference.\nchanNames: List of channel names associated with signals array\n\nReturns\n\nRereferenced signals\n\n\n\n\n\nrereference(a::EEG, refChan::Union{AbstractString, Array{AbstractString}}; kwargs...)\n\nReference data to specified channel(s).\n\nExample\n\na = rereference(a, \"Cz\")\n# or\na = rereference(a, [\"P9\", \"P10\"])\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.remove_template","page":"Low-Level API","title":"Neuroimaging.remove_template","text":"remove_template(signals::Array{T,2}, template::AbstractVector{T})\n\nRemove a template signal from each column of an array\n\nArguments\n\nsignals: Original signals to be modified  (samples x channels)\ntemplate: Template to remove from each signal\n\nReturns\n\nSignals with template removed\n\n\n\n\n\n","category":"function"},{"location":"api/#Epoching","page":"Low-Level API","title":"Epoching","text":"","category":"section"},{"location":"api/","page":"Low-Level API","title":"Low-Level API","text":"epoch_rejection\npeak2peak\nextract_epochs","category":"page"},{"location":"api/#Neuroimaging.epoch_rejection","page":"Low-Level API","title":"Neuroimaging.epoch_rejection","text":"epoch_rejection(epochs::Array{T,3}, retain_percentage::AbstractFloat; rejection_method::Function = Neuroimaging.peak2peak) where {T<:Number}\n\nReject epochs based on the maximum peak to peak voltage within an epoch across all channels\n\nArguments\n\nepochs: Array containing the epoch data in the format samples x epochs x channels\nretain_percentage: The percentage of epochs to retain\nrejection_method: Method to be used for epoch rejection (peak2peak)\n\nReturns\n\nAn array with a reduced amount of entries in the epochs dimension\n\n\n\n\n\nepoch_rejection(a::EEG; retain_percentage::Number = 0.95, kwargs...)\n\nReject epochs such that retain_percentage is retained.\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.peak2peak","page":"Low-Level API","title":"Neuroimaging.peak2peak","text":"peak2peak(epochs::Array{T,3}) where {T<:Number}\n\nFind the peak to peak value for each epoch to be returned to epoch_rejection()\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.extract_epochs","page":"Low-Level API","title":"Neuroimaging.extract_epochs","text":"Extract epoch data from array of channels.\n\nInput\n\nArray of raw data. Samples x Channels\nDictionary of trigger information\nVector of valid trigger numbers\nNumber of first triggers to remove\nNumber of end triggers to remove\n\nExample\n\nepochs = extract_epochs(data, triggers, [1,2], 0, 0)\n\n\n\n\n\nfunction extract_epochs(a::SSR; valid_triggers::Union{AbstractArray,Int} = [1, 2], remove_first::Int = 0, remove_last::Int = 0, kwargs...)\n\nExtract epoch data from SSR\n\nArguments\n\na: A SSR object\nvalid_triggers: Trigger numbers that are considered valid ([1,2])\nremove_first: Remove the first n triggers (0)\nremove_last: Remove the last n triggers (0)\n\nExamples\n\nepochs = extract_epochs(SSR, valid_triggers=[1,2])\n\n\n\n\n\n","category":"function"},{"location":"api/#Channels","page":"Low-Level API","title":"Channels","text":"","category":"section"},{"location":"api/","page":"Low-Level API","title":"Low-Level API","text":"match_sensors\nchannel_rejection","category":"page"},{"location":"api/#Neuroimaging.match_sensors","page":"Low-Level API","title":"Neuroimaging.match_sensors","text":"match_sensors(sens::Array{S}, lbls::Array{AS}) where {AS<:AbstractString, S<:Sensor}\n\nMatch a set of electrodes to those provided\n\nExamples\n\nlf, valid = match_sensors(electrodes, sensor_labels)\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.channel_rejection","page":"Low-Level API","title":"Neuroimaging.channel_rejection","text":"channel_rejection(sigs::Array{T}, threshold_abs::Number, threshold_var::Number) where {T<:Number}\n\nReject channels with too great a variance.\n\nRejection can be based on a threshold or dynamicly chosen based on the variation of all channels.\n\nArguments\n\nsignals: Array of data in format samples x channels\nthreshold_abs: Absolute threshold to remove channels with variance above this value\nthreshold_std: Reject channels with a variance more than n times the std of all channels\n\nReturns\n\nAn array indicating the channels to be kept\n\n\n\n\n\n","category":"function"},{"location":"api/#Triggers","page":"Low-Level API","title":"Triggers","text":"","category":"section"},{"location":"api/","page":"Low-Level API","title":"Low-Level API","text":"TODO: Make a type subsection similar to EEG and ASSR.","category":"page"},{"location":"api/","page":"Low-Level API","title":"Low-Level API","text":"join_triggers\nvalidate_triggers\nclean_triggers","category":"page"},{"location":"api/#Neuroimaging.join_triggers","page":"Low-Level API","title":"Neuroimaging.join_triggers","text":"Append the trigger information of one EEG type to another. Places the trigger information at the end of first file\n\nExample\n\njoin_triggers(a, b)\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.validate_triggers","page":"Low-Level API","title":"Neuroimaging.validate_triggers","text":"validate_triggers(t::Dict)\n\nValidate trigger channels have required keys and information.\n\nTrigger information is stored in a dictionary containing three fields, all referenced in samples:\n\nIndex: Start of trigger\nCode: Code of trigger\nDuration: Duration of trigger\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.clean_triggers","page":"Low-Level API","title":"Neuroimaging.clean_triggers","text":"clean_triggers(t::Dict, valid_triggers::Array{Int}, min_epoch_length::Int, max_epoch_length::Int, remove_first::Int, max_epochs::Int)\n\nClean trigger channel information by removing specified epochs if they are too long or short. Can also remove the first trigger which often represent the start of a condition or measurement. Can also be used to limit the number of total epochs.\n\n\n\n\n\n","category":"function"},{"location":"api/#Dipoles","page":"Low-Level API","title":"Dipoles","text":"","category":"section"},{"location":"api/","page":"Low-Level API","title":"Low-Level API","text":"TODO: Make a type subsection similar to EEG and ASSR.","category":"page"},{"location":"api/","page":"Low-Level API","title":"Low-Level API","text":"find_dipoles\nfind_location","category":"page"},{"location":"api/#Neuroimaging.find_dipoles","page":"Low-Level API","title":"Neuroimaging.find_dipoles","text":"Find all dipole in an activity map.\n\nDetermines the local maxima in a 3 dimensional array\n\nInput\n\ns: Activity in 3d matrix\nwindow: Windowing to use in each dimension for min max filter\nx,y,z: Coordinates associated with s matrix\n\nOutput\n\ndips: An array of dipoles\n\n\n\n\n\n","category":"function"},{"location":"api/#Neuroimaging.find_location","page":"Low-Level API","title":"Neuroimaging.find_location","text":"Find index of location of coordinate or dipole in leadfield\n\n\n\n\n\nFind indicies of location in VolumeImage\n\n\n\n\n\n","category":"function"},{"location":"tr/examples/#Transient-Responses","page":"Example","title":"Transient Responses","text":"","category":"section"},{"location":"tr/examples/#Read-data","page":"Example","title":"Read data","text":"","category":"section"},{"location":"tr/examples/","page":"Example","title":"Example","text":"First we read the measurement data which is stored in biosemi data format.","category":"page"},{"location":"tr/examples/","page":"Example","title":"Example","text":"using DisplayAs # hide\nusing Neuroimaging, DataDeps, Unitful\ndata_path = joinpath(\n    datadep\"ExampleSSR\",\n    \"Neuroimaging.jl-example-data-master\",\n    \"neuroimaingSSR.bdf\",\n)\n\ns = read_TR(data_path)","category":"page"},{"location":"coord/examples/#Coordinate-Systems","page":"Example","title":"Coordinate Systems","text":"","category":"section"},{"location":"coord/examples/","page":"Example","title":"Example","text":"There are a wide variety of coordinate systems used in Neuroimaging. Neuroimaging.jl provides a coordinate data type, and several subtypes associated with specific systems. Conversion between coordinate systems is available. For a general overview of coordinate systems in neuroimaging see:","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"https://mne.tools/dev/autotutorials/forward/20source_alignment.html\nhttps://www.fieldtriptoolbox.org/faq/coordsys/","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"This package currently supports SPM, BrainVision, and Talairach coordinates and conversion. Additionally, an Unknown coordinate system can be used if you don't know how your locations are mapped.","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"note: Refactoring in progress\nThis example demonstrates the existing capabilities of the package. General improvements are planned to this package. But before changes are made, the existing features and functions will be documented. This will help to highlight was has already been implemented, and where improvements need to be made. For a rough plan of how the package is being redeveloped see the GitHub issues and project board.","category":"page"},{"location":"coord/examples/#Create-a-coordinate","page":"Example","title":"Create a coordinate","text":"","category":"section"},{"location":"coord/examples/","page":"Example","title":"Example","text":"We can create a coordinate point by calling the appropriate type. Internally Neuroimaging.jl uses SI units, so meters for these locations. But the results are displayed in the more convenient centimeter notation.","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"By default everything is SI units, so if you pass in a distance without specifying the unit it will be in meters.","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"using DisplayAs # hide\nusing Neuroimaging, Unitful\n\nSPM(0.0737, -0.0260, 0.0070)","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"However, it is clearer and less prone to error if you specify the unit at construction, and let the internals handle the conversion.","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"location_1 = SPM(73.7u\"mm\", -26u\"mm\", 7u\"mm\")","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"Note that this position is taken from table IV from:","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"Lancaster, Jack L., et al. \"Bias between MNI and Talairach coordinates analyzed using the ICBM‐152 brain template.\" Human brain mapping 28.11 (2007): 1194-1205.","category":"page"},{"location":"coord/examples/#Conversion-between-coordinates","page":"Example","title":"Conversion between coordinates","text":"","category":"section"},{"location":"coord/examples/","page":"Example","title":"Example","text":"To convert between different coordinate systems simply call the convert function with the first arguments as the desired coordinate system. The show function displays the passed type nicely with domain appropriate units.","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"show(convert(Talairach, location_1))","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"And we can see that the resulting value is similar to what is provided in the Lancaster 2007 article. Although not exact, there is some loss in the transformations.","category":"page"},{"location":"coord/examples/#Sensors","page":"Example","title":"Sensors","text":"","category":"section"},{"location":"coord/examples/","page":"Example","title":"Example","text":"Sensors contain location information stored as coordinate types. So if we load an EEG measurement...","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"using Neuroimaging, DataDeps\ndata_path = joinpath(\n    datadep\"ExampleSSR\",\n    \"Neuroimaging.jl-example-data-master\",\n    \"neuroimaingSSR.bdf\",\n)\n\ns = read_SSR(data_path)","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"we can then query the sensors by calling...","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"sensors(s)","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"And we can see that there are 7 electrodes with standard 10-20 names. However, they do not have positions encoded by default.","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"note: Great first issue\nA mapping for standard position names like 10-20 or 10-05 to coordinates would be a great improvement to the project.","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"We can query the coordinate positions for the electrodes. For example, to obtain the x locations for all sensors in the EEG measurement use...","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"x(sensors(s))","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"or to get all the labels use...","category":"page"},{"location":"coord/examples/","page":"Example","title":"Example","text":"labels(sensors(s))","category":"page"},{"location":"usage/filter/#Filtering","page":"Filtering","title":"Filtering","text":"","category":"section"},{"location":"usage/filter/","page":"Filtering","title":"Filtering","text":"Neuroimaging.jl provides a flexible filtering interface with sane defaults for different data and experimental types, this is achieved by providing a light wrapper over the DSP.jl backend.","category":"page"},{"location":"usage/filter/","page":"Filtering","title":"Filtering","text":"note: DSP.jl documentation\nThe filtering processes for this package are dependent on the DSP.jl package. As such, we recommend reading the  DSP.jl documentation to understand the design choices used in this pacakge, and to utilise the ability to define custom filtering.","category":"page"},{"location":"usage/filter/#Import-example-EEG-data","page":"Filtering","title":"Import example EEG data","text":"","category":"section"},{"location":"usage/filter/","page":"Filtering","title":"Filtering","text":"To demonstrate the filtering capabilities of this package we first import some example data. For simplicity, we will simply process one channel of data in this example.","category":"page"},{"location":"usage/filter/","page":"Filtering","title":"Filtering","text":"using DisplayAs # hide\nusing Neuroimaging, DataDeps, StatsBase, Unitful\n\ndata_path = joinpath(\n    datadep\"ExampleSSR\",\n    \"Neuroimaging.jl-example-data-master\",\n    \"neuroimaingSSR.bdf\",\n)\n\ns = read_SSR(data_path)\ns.data = s.data .- StatsBase.mean(s.data, dims=1) # remove DC offset for easier plotting\nkeep_channel!(s, \"F5\")\ns","category":"page"},{"location":"usage/filter/#Modality-specific-filter","page":"Filtering","title":"Modality specific filter","text":"","category":"section"},{"location":"usage/filter/","page":"Filtering","title":"Filtering","text":"Neuroimaging.jl provides standard filter functions for each data type and experimental design type. This allows you to quickly get started with sane filtering parameters. First we demonstrate the standard filtering functions applied to two data types. Then, below we demonstrate how to apply a custom defined filter to any Neuroimaging.jl type.","category":"page"},{"location":"usage/filter/#SSR","page":"Filtering","title":"SSR","text":"","category":"section"},{"location":"usage/filter/","page":"Filtering","title":"Filtering","text":"The steady state response type uses a third order Butterworth filter with a 2 Hz cutoff by default. The filter is applied twice to achieve zero phase filtering, by using the filtfilt function from DSP.jl.","category":"page"},{"location":"usage/filter/","page":"Filtering","title":"Filtering","text":"using Plots\n\ns_hp = filter_highpass(s)\n\nplot(s, label=\"Original Signal\")\nplot!(s_hp, label=\"Filtered Signal\")\ncurrent() |> DisplayAs.PNG # hide","category":"page"},{"location":"usage/filter/#EEG","page":"Filtering","title":"EEG","text":"","category":"section"},{"location":"usage/filter/","page":"Filtering","title":"Filtering","text":"For general EEG types a FIR filter is utilised with a Hamming window. By default zero phase filtering is applied by compensating for the delay of the filter.","category":"page"},{"location":"usage/filter/","page":"Filtering","title":"Filtering","text":"s2 = read_EEG(data_path)\ns2.data = s2.data .- StatsBase.mean(s2.data, dims=1) # remove DC offset for better plotting\nkeep_channel!(s2, \"F5\")\n\ns_hp = filter_highpass(s2, cutOff = 2u\"Hz\")\ns_lp = filter_lowpass(s2, cutOff = 5u\"Hz\") # extreme value to show LP effect in plot\n\nplot(s2, label=\"raw\")\nplot!(s_hp, label=\"highpass\")\nplot!(s_lp, label=\"lowpass\")\ncurrent() |> DisplayAs.PNG # hide","category":"page"},{"location":"usage/filter/#Custom-defined-filter","page":"Filtering","title":"Custom defined filter","text":"","category":"section"},{"location":"usage/filter/","page":"Filtering","title":"Filtering","text":"In addition to the default filtering above, Neuroimaging.jl provides the user completely flexibility in filtering the data by allowing standard DSP.jl objects to be used directly on data types. The functions filt and filtfilt are both exposed to the user and work with all Neuroimaging.jl data types.","category":"page"},{"location":"usage/filter/","page":"Filtering","title":"Filtering","text":"In this example a custom zero pole gain implementation of a 6th order  Butterworth filter is applied to the SSR data. The filter is applied using both the zero-phase filtfilt approach and the standard filt.","category":"page"},{"location":"usage/filter/","page":"Filtering","title":"Filtering","text":"using DSP\nresponsetype =  Highpass(3, fs = samplingrate(Float64, s))\ndesignmethod =  Butterworth(6)\nzpg = digitalfilter(responsetype, designmethod)\n\n# Apply filtering using each exposed method\ns_custom_filtfilt = Neuroimaging.filtfilt(s, zpg) \ns_custom_filt = Neuroimaging.filt(s, zpg) \n\ns = trim_channel(s, 10000)\ns_custom_filtfilt = trim_channel(s_custom_filtfilt, 10000)\ns_custom_filt = trim_channel(s_custom_filt, 10000)\n\nplot(s, label=\"raw\")\nplot!(s_custom_filtfilt, label=\"filtfilt\")\nplot!(s_custom_filt, label=\"filt\")\ncurrent() |> DisplayAs.PNG # hide","category":"page"},{"location":"usage/filter/#Summary","page":"Filtering","title":"Summary","text":"","category":"section"},{"location":"usage/filter/","page":"Filtering","title":"Filtering","text":"We have demonstrated how to apply standard and custom filtering to your neuroimaging data. If your specific experimental design data has a common filtering specification that is not yet included in Neuroimaging.jl, then please raise an issue on the GitHub page and we can add support for your data type.","category":"page"},{"location":"eeg/functions/#Functions","page":"API","title":"Functions","text":"","category":"section"},{"location":"eeg/functions/","page":"API","title":"API","text":"In addition to the function available for processing EEG data, a number of functions are provided specifically for the processing of SSR data","category":"page"},{"location":"eeg/functions/#Import","page":"API","title":"Import","text":"","category":"section"},{"location":"eeg/functions/","page":"API","title":"API","text":"read_EEG","category":"page"},{"location":"eeg/functions/#Neuroimaging.read_EEG","page":"API","title":"Neuroimaging.read_EEG","text":"read_EEG(fname::AbstractString)\nread_EEG(args...)\n\nRead a file or IO stream and store the data in an GeneralEEG type.\n\nArguments\n\nfname: Name of the file to be read\nmin_epoch_length: Minimum epoch length in samples. Shorter epochs will be removed (0)\nmax_epoch_length: Maximum epoch length in samples. Longer epochs will be removed (0 = all)\nvalid_triggers: Triggers that are considered valid, others are removed ([1,2])\nstimulation_amplitude: Amplitude of stimulation (NaN)\nremove_first: Number of epochs to be removed from start of recording (0)\nmax_epochs: Maximum number of epochs to retain (0 = all)\n\nSupported file formats\n\nBIOSEMI (.bdf)\n\n\n\n\n\n","category":"function"},{"location":"eeg/functions/#Querying-data","page":"API","title":"Querying data","text":"","category":"section"},{"location":"eeg/functions/","page":"API","title":"API","text":"samplingrate(::EEG)\nchannelnames(::EEG)\nsensors(::EEG)\ndata(::EEG)","category":"page"},{"location":"eeg/functions/#Neuroimaging.samplingrate-Tuple{EEG}","page":"API","title":"Neuroimaging.samplingrate","text":"samplingrate(t::Type, s::EEG)\nsamplingrate(s::EEG)\n\nReturn the sampling rate of an EEG type in Hz as the requested type. If no type is provided, the sampling rate is returned as a floating point number.\n\nExamples\n\ns = read_EEG(filename)\nsamplingrate(s)\n\n\n\n\n\n","category":"method"},{"location":"eeg/functions/#Neuroimaging.channelnames-Tuple{EEG}","page":"API","title":"Neuroimaging.channelnames","text":"channelnames(s::EEG)\n\nReturn the names of sensors in EEG measurement.\n\nExamples\n\ns = read_EEG(filename)\nchannelnames(s)\n\n\n\n\n\n","category":"method"},{"location":"eeg/functions/#Neuroimaging.sensors-Tuple{EEG}","page":"API","title":"Neuroimaging.sensors","text":"sensors(s::EEG)\nchannelnames(s::EEG, l::AbstractVector{AbstractString})\n\nReturns the sensors for an EEG recording.\n\nExamples\n\ns = read_EEG(filename)\nsensors(s)\n\n\n\n\n\n","category":"method"},{"location":"eeg/functions/#Neuroimaging.data-Tuple{EEG}","page":"API","title":"Neuroimaging.data","text":"data(s::EEG)\ndata(s::EEG, channel::AbstractString)\ndata(s::EEG, channels::AbstractVector{AbstractString})\n\nReturn the data stored in the type object. This may be useful for integration with custom processing.\n\nExamples\n\ns = read_EEG(filename)\ndata(s)\ndata(s, \"Cz\")\ndata(s, [\"Cz\", \"P2\"])\n\n\n\n\n\n","category":"method"},{"location":"eeg/functions/#Manipulating-data","page":"API","title":"Manipulating data","text":"","category":"section"},{"location":"eeg/functions/","page":"API","title":"API","text":"hcat(::EEG, ::EEG)\nadd_channel(::EEG, ::Vector, ::AbstractString)\nremove_channel!(::EEG, ::AbstractString)\nkeep_channel!(::EEG, ::AbstractString)\ntrim_channel(::EEG, ::Int)\nmerge_channels","category":"page"},{"location":"eeg/functions/#Base.hcat-Tuple{EEG, EEG}","page":"API","title":"Base.hcat","text":"hcat(a::EEG, b::EEG)\n\nConcatenate two EEG measurements together, effectively creating a single long measurement.\n\nExamples\n\nhcat(a, b)\n\n\n\n\n\n","category":"method"},{"location":"eeg/functions/#Neuroimaging.add_channel-Tuple{EEG, Vector{T} where T, AbstractString}","page":"API","title":"Neuroimaging.add_channel","text":"add_channel(a::EEG, data::Vector, chanLabel::AbstractString)\n\nAdd a channel to the EEG type with specified channel names.\n\nExamples\n\ns = read_EEG(filename)\nnew_channel = mean(s.data, 2)\ns = add_channel(s, new_channel, \"MeanChannelData\")\n\n\n\n\n\n","category":"method"},{"location":"eeg/functions/#Neuroimaging.remove_channel!-Tuple{EEG, AbstractString}","page":"API","title":"Neuroimaging.remove_channel!","text":"remove_channel!(a::EEG, channelname::AbstractString)\nremove_channel!(a::EEG, channelnames::Array{AbstractString})\nremove_channel!(a::EEG, channelidx::Int)\nremove_channel!(a::EEG, channelidxs::Array{Int})\n\nRemove channel(s) from EEG as specifed by channelname or channelidx.\n\nExamples\n\na = read_EEG(filename)\nremove_channel!(a, [\"TP8\", \"Cz\"])\n\n\n\n\n\n","category":"method"},{"location":"eeg/functions/#Neuroimaging.keep_channel!-Tuple{EEG, AbstractString}","page":"API","title":"Neuroimaging.keep_channel!","text":"keep_channel!(a::EEG, channelname::AbstractString)\nkeep_channel!(a::EEG, channelnames::Array{AbstractString})\nkeep_channel!(a::EEG, channelidxs::Array{Int})\n\nRemove all channels except those requested from EEG.\n\nExamples\n\na = read_EEG(filename)\nkeep_channel!(a, [\"P8\", \"Cz\"])\n\n\n\n\n\n","category":"method"},{"location":"eeg/functions/#Neuroimaging.trim_channel-Tuple{EEG, Int64}","page":"API","title":"Neuroimaging.trim_channel","text":"trim_channel(a::EEG, stop::Int; start::Int=1)\n\nTrim EEG recording by removing data after stop specifed samples and optionally before start samples.\n\nExamples\n\ns = trim_channel(s, 8192*300, start=8192)\n\n\n\n\n\n","category":"method"},{"location":"eeg/functions/#Neuroimaging.merge_channels","page":"API","title":"Neuroimaging.merge_channels","text":"merge_channels(a::EEG, merge_Chans::Array{S}, new_name::S) where {S<:AbstractString}\nmerge_channels(a::EEG, merge_Chans::S, new_name::S) where {S<:AbstractString}\n\nAverage EEG channels listed in merge_Chans and label the averaged channel as new_name.\n\nExamples\n\ns = merge_channels(s, [\"P6\", \"P8\"], \"P68\")\n\n\n\n\n\n","category":"function"},{"location":"eeg/functions/#Filtering","page":"API","title":"Filtering","text":"","category":"section"},{"location":"eeg/functions/","page":"API","title":"API","text":"filter_highpass(::EEG)\nfilter_lowpass(::EEG)\nfilter_bandpass(::EEG)","category":"page"},{"location":"eeg/functions/#Neuroimaging.filter_highpass-Tuple{EEG}","page":"API","title":"Neuroimaging.filter_highpass","text":"filter_highpass(a::EEG; cutOff::Real=2, fs::Real=samplingrate(a), order::Int=0, kwargs...)\n\nApply a high pass filter.\n\nIf order is zero then its computed magically.\n\nExamples\n\na = read_EEG(fname)\nb = filter_highpass(a)\nc = filter_highpass(a, cutOff = 1)\n\n\n\n\n\n","category":"method"},{"location":"eeg/functions/#Neuroimaging.filter_lowpass-Tuple{EEG}","page":"API","title":"Neuroimaging.filter_lowpass","text":"filter_lowpass(a::EEG; cutOff::Real=150, fs::Real=samplingrate(a), order::Int=0, kwargs...)\n\nApply a low pass filter.\n\nIf order is zero then its computed magically.\n\nExamples\n\na = read_EEG(fname)\nb = filter_lowpass(a)\nc = filter_lowpass(a, cutOff = 1)\n\n\n\n\n\n","category":"method"},{"location":"eeg/functions/#Epoching","page":"API","title":"Epoching","text":"","category":"section"},{"location":"eeg/functions/","page":"API","title":"API","text":"epoch_rejection(a::EEG)","category":"page"},{"location":"eeg/functions/#Neuroimaging.epoch_rejection-Tuple{EEG}","page":"API","title":"Neuroimaging.epoch_rejection","text":"epoch_rejection(a::EEG; retain_percentage::Number = 0.95, kwargs...)\n\nReject epochs such that retain_percentage is retained.\n\n\n\n\n\n","category":"method"},{"location":"eeg/functions/#Plotting","page":"API","title":"Plotting","text":"","category":"section"},{"location":"eeg/functions/","page":"API","title":"API","text":"plot_timeseries(::EEG)","category":"page"},{"location":"usage/access/#Accessing-measurement-properties","page":"Accessing data","title":"Accessing measurement properties","text":"","category":"section"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"The Neuroimaging.jl library uses functions to access underlying properties of the data structures. This is to enable a consistent API to users, while allowing flexibility in the underlying design.","category":"page"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"To minimise the risk of making errors when specifying values, passing arguments, and scaling values, the Neuroimaging.jl library uses units wherever possible. The Unitful.jl package provides a convenient interface for handling unitful data.","category":"page"},{"location":"usage/access/#Handling-of-units","page":"Accessing data","title":"Handling of units","text":"","category":"section"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"Many of the underlying components of this package store values with units. For example, coordinates are stored internally in the unit of meters, and sampling rates are stored in hertz. This minimises errors in two ways. First, if you pass arguments in the wrong order to a function it may be caught. Second, if you accidentally pass kHz as a sample rate this will be correctly converted to Hz for you internally.","category":"page"},{"location":"usage/access/#Retrieving-information-from-data","page":"Accessing data","title":"Retrieving information from data","text":"","category":"section"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"To access information about your neuroimaging data you must query it using the provided functions. A list of functions is provided for each type in the documentation. And common functions available across all types are described in the types documentation. So for example, if you wanted to query the samplerate of a measurement:","category":"page"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"using Neuroimaging, DataDeps, Unitful\ndata_path = joinpath(\n    datadep\"ExampleSSR\",\n    \"Neuroimaging.jl-example-data-master\",\n    \"neuroimaingSSR.bdf\",\n)\ns = read_EEG(data_path)\nsamplingrate(s)","category":"page"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"However, sometime you do not want the data with its units. Let us say you want the sample rate in kHz. In this case you can pipe the data manually...","category":"page"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"samplingrate(s) |> u\"kHz\" |> ustrip ","category":"page"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"Or you may wish to know the sample rate in mHz and require that the value is an integer, then you could run...","category":"page"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"samplingrate(s) |> u\"mHz\" |> ustrip |> Int","category":"page"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"Or you could simply specify the return type of the function...","category":"page"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"samplingrate(Float64, s)","category":"page"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"You should access all properties of the data in this fashion. For example the functions data, modulationrate, channel_names should all be used to query this properties.","category":"page"},{"location":"usage/access/#Displaying-data-properties","page":"Accessing data","title":"Displaying data properties","text":"","category":"section"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"The underlying data is stored with units wherever possible and in SI units. This makes it easy to keep track of everything when programming. However, when we report data these units may not be appropriate. For example, fNIRS data is usually reported in micro Mol, it would be inconvenient to report and plot values with six leading zeros. Similarly locations of neuroimaging coordinates are often reported in millimeters. So the show functions will report the data in the typical scale for the area of research.","category":"page"},{"location":"usage/access/","page":"Accessing data","title":"Accessing data","text":"show(sensors(s)[2])","category":"page"},{"location":"assr/examples/#Auditory-Steady-State-Response-Example","page":"Example","title":"Auditory Steady State Response Example","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"This tutorial demonstrates how to analyse an EEG measurement that was acquired while the participant was listening to a modulated noise. This stimulus should evoke an Auditory Steady State Response (ASSR) that can be observed in the signal.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"The stimulus was modulated at 40.0391 Hz. As such, the frequency content of the signal will be examined. An increase in stimulus locked activity is expected at the modulation rate and harmonics, but not other frequencies.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"A standard ASSR analysis is performed. After an introduction to the data structure, a high pass filter is applied, the signal is referenced to Cz, epochs are extracted then combined in to sweeps, then finally an f-test is applied to the sweep data in the frequency domain. For further details on analysis see:","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"Picton, Terence W. Human auditory evoked potentials. Plural Publishing, 2010.\nLuke, Robert, Astrid De Vos, and Jan Wouters. \"Source analysis of auditory steady-state responses in acoustic and electric hearing.\" NeuroImage 147 (2017): 568-576.\nLuke, Robert, et al. \"Assessing temporal modulation sensitivity using electrically evoked auditory steady state responses.\" Hearing research 324 (2015): 37-45.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"note: Refactoring in progress\nThis example demonstrates the existing capabilities of the package. General improvements are planned to this package. But before changes are made, the existing features and functions will be documented. This will help to highlight was has already been implemented, and where improvements need to be made. For a rough plan of how the package is being redeveloped see the GitHub issues and project board.","category":"page"},{"location":"assr/examples/#Read-data","page":"Example","title":"Read data","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"First we read the measurement data which is stored in biosemi data format.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"using DisplayAs # hide\nusing Neuroimaging, DataDeps, Unitful\ndata_path = joinpath(\n    datadep\"ExampleSSR\",\n    \"Neuroimaging.jl-example-data-master\",\n    \"neuroimaingSSR.bdf\",\n)\n\ns = read_SSR(data_path)","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"The function will extract the modulation from the function name if available. In this case the file name was not meaningful, and so we must inform the software of information that is essential to analysis, but not stored in the data. When analysing a steady state response a modulation rate is required. Which can be set according to:","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"s.modulationrate = 40.0391u\"Hz\"\ns","category":"page"},{"location":"assr/examples/#Preprocessing","page":"Example","title":"Preprocessing","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"s = filter_highpass(s)\ns = rereference(s, \"Cz\")\nremove_channel!(s, \"Cz\")\ns","category":"page"},{"location":"assr/examples/#Visualise-processed-continuous-data","page":"Example","title":"Visualise processed continuous data","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"using Plots # hide\nplot(s, \"TP7\")\ncurrent() |> DisplayAs.PNG # hide","category":"page"},{"location":"assr/examples/#Epoch-and-combine-data","page":"Example","title":"Epoch and combine data","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"To emphasise the stimulus locked nature of the response and combat clock drift the signal is then cut in to epochs based on the trigger information. To increase the available frequency resolution the epochs are then concatenated in to sweeps.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"s = extract_epochs(s)\ns = create_sweeps(s, epochsPerSweep = 8)","category":"page"},{"location":"assr/examples/#Extract-Steady-State-Response-Statistics","page":"Example","title":"Extract Steady State Response Statistics","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"Standard statistical tests can then be run on the data. An ftest will automatically convert the sweeps in to the frequency domain and apply the appropriate tests with sane default values. By default, it analyses the modulation frequency. The result is stored in the statistics processing log by default, but this can be specified by the user.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"s = ftest(s)\ns.processing[\"statistics\"]","category":"page"},{"location":"assr/examples/#Visualise-spectrum","page":"Example","title":"Visualise spectrum","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"Next we can visualise the spectral content of the signal. As the response statistics have already been computed, this will be overlaid on the plot.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"plot_spectrum(s, 3)\ncurrent() |> DisplayAs.PNG # hide","category":"page"},{"location":"assr/examples/#Quantify-the-false-positive-rate-of-statistical-analysis","page":"Example","title":"Quantify the false positive rate of statistical analysis","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"While its interesting to observe a significant response at the modulation rate as expected, it is important to ensure that the false detection rate at other frequencies is not too high. As such we can analyse all other frequencies from 10 to 400 Hz and quantify the false detection rate.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"For this example file the resulting false detection rate is slightly over 5%.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"using DataFrames, Query, Statistics\n\ns = ftest(s, freq_of_interest=[10:38; 42:400])\n\ns.processing[\"statistics\"][!, \"Significant\"] = Int.(s.processing[\"statistics\"][!, \"Statistic\"] .< 0.05)\n\ns.processing[\"statistics\"] |> \n    @groupby(_.AnalysisType) |> \n    @map({AnalysisType=key(_),\n        FalseDiscoveryRate_Percentage=100*Statistics.mean(_.Significant)}) |>\n    DataFrame","category":"page"},{"location":"assr/examples/#Visualise-response-amplitude","page":"Example","title":"Visualise response amplitude","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"Finally we can plot the ASSR spectrum. You can use the same convenient function as above, but here we will demonstrate how to do this using the StatsPlot library. This is possible because the results are stored in the format of a data frame.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"We will also mark with red dots the frequency components which contained a significant stimulus locked response according to the f-test. And we add a vertical line at the modulation rate.","category":"page"},{"location":"assr/examples/","page":"Example","title":"Example","text":"using StatsPlots\n\ndf = s.processing[\"statistics\"] |> \n    @groupby(_.AnalysisFrequency) |> \n    @map({AnalysisFrequency=key(_),\n        AverageAmplitude=Statistics.mean(_.SignalAmplitude),\n        AverageStatistic=Int(Statistics.mean(_.Statistic).<0.05)}) |>\n    @orderby_descending(_.AnalysisFrequency) |> \n    DataFrame\n\nvline([40], ylims=(0, 0.3), colour=\"grey\", line=:dash, lab=\"Modulation rate\")\ndf |> @df StatsPlots.plot!(:AnalysisFrequency, :AverageAmplitude, xlabel=\"Frequency (Hz)\", ylabel=\"Amplitude (uV)\", lab=\"\", color=\"black\")\ndf|> @filter(_.AverageStatistic == 1) |> @df StatsPlots.scatter!(:AnalysisFrequency, :AverageAmplitude, color=\"red\", ms=4, lab=\"Significant response\")\ncurrent() |> DisplayAs.PNG # hide","category":"page"},{"location":"assr/examples/#Conclusion","page":"Example","title":"Conclusion","text":"","category":"section"},{"location":"assr/examples/","page":"Example","title":"Example","text":"An analysis pipeline of a steady state response measurement has been demonstrated. Importing the file and specifying the required information was described. As was preprocessing and statistical analysis. The false detection rate of the analysis was quantified. Finally, a figure was created to summarise the underlying data and demonstrate the increased stimulus locked response at the modulation rate.","category":"page"},{"location":"#Neuroimaging.jl-Manual","page":"Home","title":"Neuroimaging.jl Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for processing neuroimaging data.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install this package enter the package manager by pressing ] at the julia prompt and enter:","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add Neuroimaging","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package provides a framework for processing neuroimaging data. It provides tools to handle high level data structures such as EEG data types, electrode and optode sensor types, coordinate systems etc. Low-level functions are also provided for operating on Julia native data types.","category":"page"},{"location":"","page":"Home","title":"Home","text":"An overview of different data types is provided along with an example for each type and list of available functions. This is followed by a list of the low-level function APIs.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: This package is in the process of being updated\nThis package has been around since Julia v0.1! The Julia language has evolved since the early days, and there are many places in the codebase that should be bought up to date with the latest Julia standards.  General improvements are planned to this package. But before changes are made, the existing features and functions will be documented. This will help to highlight what has already been implemented, and where improvements need to be made. For a rough plan of how the package is being redeveloped see the GitHub issues and project board.","category":"page"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = Neuroimaging","category":"page"},{"location":"eeg/examples/#Example","page":"Example","title":"Example","text":"","category":"section"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"This example demonstrates basic processing of an EEG measurement with Neuroimaging.jl`. An example file is imported, and the basic properties of the data structure are reported including sampling rate and channel information. Simple preprocessing, such as referencing and channel manipulation is demonstrated. And the data of a single channel and multiple channels is visualised.","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"note: Refactoring in progress\nThis example demonstrates the existing capabilities of the package. General improvements are planned to this package. But before changes are made, the existing features and functions will be documented. This will help to highlight was has already been implemented, and where improvements need to be made. For a rough plan of how the package is being redeveloped see the GitHub issues and project board.","category":"page"},{"location":"eeg/examples/#Import-EEG-measurement-in-to-Neuroimaging.jl-for-analysis","page":"Example","title":"Import EEG measurement in to Neuroimaging.jl for analysis","text":"","category":"section"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"The first step in this example is to import the required packages. In addition to importing the Neuroimaging.jl package, the DataDeps package is imported to facilitate access to the example dataset ExampleSSR which contains an example EEG measurement in the Biosemi data format.","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"To read the data the function read_EEG is used. This returns the data as a GeneralEEG type which stores EEG measurements that are not associated with any particular experimental paradigm.","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"using DisplayAs # hide\nusing Neuroimaging, DataDeps\n\ndata_path = joinpath(\n    datadep\"ExampleSSR\",\n    \"Neuroimaging.jl-example-data-master\",\n    \"neuroimaingSSR.bdf\",\n)\n\ns = read_EEG(data_path)","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"To view a summary of the returned data simply call the returned variable.","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"s","category":"page"},{"location":"eeg/examples/#Probe-information-about-the-EEG-measurement","page":"Example","title":"Probe information about the EEG measurement","text":"","category":"section"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"The summary output of the imported data only includes basic information. Several functions are provided to access more detailed aspects of the recording. To list the names of the channels in this measurement call:","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"channelnames(s)","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"Similarly to query the sample rate of the measurement.  Internally Neuroimaging.jl makes extensive use of the Uniful package and stores many values with their associated units. To obtain the sampling rate in Hz as a floating point number call:","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"samplingrate(s)","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"tip: Accessing data structure fields\nNote that we call the function channelnames, and do not access properties of the type itself. This allows the use of the same functions across multiple datatypes due to the excellent dispatch system in the Julia language. Accessing the fields of data types directly is not supported in Neuroimaging.jl and may break at any time. If you wish to access an internal type field and a function is not provided then raise a GitHub issue.","category":"page"},{"location":"eeg/examples/#Basic-signal-processing-for-EEG-data","page":"Example","title":"Basic signal processing for EEG data","text":"","category":"section"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"Once data is imported then standard preprocessing procedures can be applied. For example to rereference the data to the Cz channel call:","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"s = rereference(s, \"Cz\")","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"After which the Cz channel will not contain meaningful information any longer. So you may wish to remove it from further analysis. You can remove multiple channels by providing an array of channel names by calling:","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"remove_channel!(s, [\"Cz\", \"TP7\"])\ns","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"And the resulting data structure will now have less channels as the output describes.","category":"page"},{"location":"eeg/examples/#Visualise-continuous-EEG-data","page":"Example","title":"Visualise continuous EEG data","text":"","category":"section"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"It is also useful to visualise the EEG data. You can view a single channel or subset of channels by passing the string or strings you wish to plot.","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"using Plots # hide\nplot(s, \"F6\")\ncurrent() |> DisplayAs.PNG # hide","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"Or you can plot all channels by calling plot with no arguments.","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"using Plots # hide\nplot(s)\ncurrent() |> DisplayAs.PNG # hide","category":"page"},{"location":"eeg/examples/#Extract-underlying-data-for-custom-analysis","page":"Example","title":"Extract underlying data for custom analysis","text":"","category":"section"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"You may wish to run your own analysis on the underlying raw data array. To access the raw data call:","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"data(s)","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"Or to access a subset of channels call:","category":"page"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"data(s, [\"F6\", \"F5\"])","category":"page"},{"location":"eeg/examples/#Conclusion","page":"Example","title":"Conclusion","text":"","category":"section"},{"location":"eeg/examples/","page":"Example","title":"Example","text":"A demonstration of how to read in EEG data was provided. A brief explanation of how to query the returned data type was discussed. Basic signal processing and plotting was demonstrated.","category":"page"},{"location":"types/#Data-Types","page":"Types","title":"Data Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"A feature of the Julia programming language is the strong type system. This package exploits that strength and defines various types for storing information about your neuroimaging data. A general hierarchy of neuroimaging types is provided.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"A number of types are provided to handle different types of data. Functions are provided to perform common operations on each type. For example, the function channelnames would return the correct information when called on a general eeg recording or steady state response data type. Users should interact with types using function, and not address the underlying fields directly. This allows the underlying data type to be improved without breaking existing code. For example, do not address sensor.label, you should use label(sensor).","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Types also exist for storing metadata. For example, electrodes are a sub type of the Sensor type. And the position of the sensors may be in the Talairach space, which is a subtype of the Coordinate type. This type hierarchy may be more than two levels deep. For example, the source type inherits from the optode type which inherits from the sensor type. All functions that operate on the top level type will also operate on lower level types, but not all functions that operate on low level types would operate on the top level. For example, the SSR type supports the function modulationrate() but the EEG type does not, as not all EEG measurements were obtained with a modulated stimulus.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"A brief description of each type is provided below. See the following documentation sections for more details of each type, including examples and function APIs.","category":"page"},{"location":"types/#Supported-Data-Types","page":"Types","title":"Supported Data Types","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"CurrentModule = Neuroimaging","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Neuroimaging","category":"page"},{"location":"types/#Neuroimaging.Neuroimaging","page":"Types","title":"Neuroimaging.Neuroimaging","text":"A Julia package for process neuroimaing data.\n\n\n\n\n\n","category":"module"},{"location":"types/#Measurement","page":"Types","title":"Measurement","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"This package provides for different neuroimaging techniques such as EEG and fNIRS. All of these types inherit from the top level abstract NeuroimagingMeasurement type.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"NeuroimagingMeasurement","category":"page"},{"location":"types/#Neuroimaging.NeuroimagingMeasurement","page":"Types","title":"Neuroimaging.NeuroimagingMeasurement","text":"Abstract type for storing Neuroimaing data.\n\nAll other neuroimaging types inherit from this type. All neuroimaing types support the following functions:\n\nsamplingrate()\nchannelnames()\nremove_channel!()\nkeep_channel!()\ntrim_channel()\nhighpass_filter()\nlowpass_filter()\ndata()\nplot()\n\nExamples\n\ndata = # load your neuroimaging data\nsamplingrate(data)  # Returns the sampling rate\nchannelnames(data)  # Returns the channel names\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Types","title":"Types","text":"Within the NeuroimagingMeasurement type a sub type is provided for each supported imaging modality (e.g., EEG). Within each imaging modality, types are provided to represent the experimental paradigm used to collect the data (e.g., SSR or RestingStateEEG). Additionally a General type is provided for data that is collected using a paradigm not yet supported in Neuroimaging.jl (e.g., GeneralEEG). This hierarchical structure allows for specific features to be added to  analysis procedures for specific experimental designs, while inheriting generic features and function from the parent types. For example, see the Auditory Steady State Response Example which uses the SSR type which is a sub type of EEG. In this example, we see that any EEG function to be run on SSR data, such as filtering or resampling, but also allows for application specific functions such as specific frequency analysis statistical tests.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"note: Support for more types is welcomed\nIf you would like to add support for a different experimental paradigm by adding a sub type then please raise an issue on the GitHub page and we can work through it together. Some additional types that would be good to support are RestingStateEEG, P300, etc.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"EEG\nGeneralEEG\nSSR\nTR","category":"page"},{"location":"types/#Neuroimaging.EEG","page":"Types","title":"Neuroimaging.EEG","text":"Abstract type to represent Electroencephalography (EEG) data.\n\nThe following types inherit from the EEG type and can be used to process your data:\n\nGeneralEEG: Used to store data without assumption of any experimental paradigm.\nSSR: Used to store data acquired with a steady state response experiment paradigm.\nTR: Used to store data acquired with a transient response experiment paradigm.\n\nExamples\n\ndata = # load your EEG data using for example read_EEG()\n\nsamplingrate(data)  # Returns the sampling rate\nchannelnames(data)  # Returns the channel names\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.GeneralEEG","page":"Types","title":"Neuroimaging.GeneralEEG","text":"Type for storing general EEG data without assumption of any experimental paradigm.\n\nExamples\n\ns = read_EEG(filename)\ns = rereference(s, \"Cz\")\ns = remove_channel!(s, \"Cz\")\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.SSR","page":"Types","title":"Neuroimaging.SSR","text":"Type for storing data acquired with a steady state response (SSR) experimental paradigm.\n\nIn addition to the functions available for all EEG types, the SSR type supports:\n\nmodulationrate()\n\nThe following standard names are used when saving data to the processing dictionary.\n\nName: The identifier for the participant\nSide: Side of stimulation\nCarrier_Frequency: Carrier frequency of the stimulus\nAmplitude: Amplitude of the stimulus\nepochs: The epochs extracted from the recording\nsweeps: The extracted sweeps from the recording\n\nExample\n\nPut an example here\n\ns = read_SSR(\"filename\")\ns.modulationrate = 40.0391u\"Hz\"\ns = rereference(s, \"Cz\")\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.TR","page":"Types","title":"Neuroimaging.TR","text":"Type for storing data acquired with a transient response (TR) experimental paradigm.\n\nExample\n\nPut an example here\n\ns = read_TR(\"filename\")\ns = rereference(s, \"Cz\")\n\n\n\n\n\n","category":"type"},{"location":"types/#Sensor","page":"Types","title":"Sensor","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Support is provided for the storing of sensor information via the Sensor type. As with the neuroimaging type, several sub types inherit from this top level type.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Sensor","category":"page"},{"location":"types/#Neuroimaging.Sensor","page":"Types","title":"Neuroimaging.Sensor","text":"Abstract type for storing neuroimaging sensors.\n\nOther types inherit from the Sensor type. And common functions can be run on all sensors sub types. All sensors have a label and coordinate. Some sensors also store additional information. For example, fNIRS sensors may hold wavelength information.\n\nAll Sensor types support the following functions:\n\nlabel()\nlabels()\nx()\ny()\nz()\n\nmy_sensor = # Create a electrode, optode etc\nlabel(my_sensor)  # Returns the sensor name\nx(my_sensor)      # Returns the x coordinate of the sensor\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Types","title":"Types","text":"Support is currently provided for EEG and fNIRS sensor types. Additional types are welcomed.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Electrode\nOptode\nSource\nDetector","category":"page"},{"location":"types/#Neuroimaging.Electrode","page":"Types","title":"Neuroimaging.Electrode","text":"Electrode sensor type used in EEG measurements.\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.Optode","page":"Types","title":"Neuroimaging.Optode","text":"Optode abstract sensor type used in fNIRS measrurements.\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.Source","page":"Types","title":"Neuroimaging.Source","text":"Source optode sensor type used in fNIRS measurements.\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.Detector","page":"Types","title":"Neuroimaging.Detector","text":"Detector optode sensor type used in fNIRS measurements.\n\n\n\n\n\n","category":"type"},{"location":"types/#Coordinate","page":"Types","title":"Coordinate","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"Support is provided for the storing of coordinate information via the Coordinate type.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"Coordinate","category":"page"},{"location":"types/#Neuroimaging.Coordinate","page":"Types","title":"Neuroimaging.Coordinate","text":"Abstract type for coordinates in three dimensions\n\nAll sub types have x, y, z coordinates. And conversion is available between subtypes using the convert function.\n\nbv_coord = (0.3, 2, 3.1)\ntal_coord = convert(Talairach, mni)\n\n\n\n\n\n","category":"type"},{"location":"types/","page":"Types","title":"Types","text":"Specific coordinate systems available are.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"BrainVision \nTalairach\nSPM\nUnknownCoordinate","category":"page"},{"location":"types/#Neuroimaging.BrainVision","page":"Types","title":"Neuroimaging.BrainVision","text":"Type for BrainVision coordinate system.\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.Talairach","page":"Types","title":"Neuroimaging.Talairach","text":"Type for Talairach coordinate system.\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.SPM","page":"Types","title":"Neuroimaging.SPM","text":"Type for SPM coordinate system.\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.UnknownCoordinate","page":"Types","title":"Neuroimaging.UnknownCoordinate","text":"Type to be used when the coordinate system is unknown.\n\n\n\n\n\n","category":"type"},{"location":"types/#Other","page":"Types","title":"Other","text":"","category":"section"},{"location":"types/","page":"Types","title":"Types","text":"These types need to be better documented.","category":"page"},{"location":"types/","page":"Types","title":"Types","text":"VolumeImage\nDipole","category":"page"},{"location":"types/#Neuroimaging.VolumeImage","page":"Types","title":"Neuroimaging.VolumeImage","text":"Volume Image\n\nThis composite type contains volume image information\n\nFields\n\ndata: contains the recorded data\nx, y, z, t Arrays containing spatial and time information\nmethod AbstractString of method used to compute tomography\ninfo: additional information in dictionary\n\nprocessing Fields\n\nThe following standard names are used when saving data to the info dictionary.\n\nRegularisation: Regularisation used in tomography\nNormalisationConstant: Value used to normalise image to maximum of 1\nFileName: Name of file\n\n\n\n\n\n","category":"type"},{"location":"types/#Neuroimaging.Dipole","page":"Types","title":"Neuroimaging.Dipole","text":"Dipole type.\n\nParameters\n\ncoord_system: The coordinate system that the locations are stored in\nx,y,z: Location of dipole\nx,y,z/ori: Orientation of dipole\ncolor: Color of dipole for plotting\nstate: State of dipol\nsize: size of dipole\n\n\n\n\n\n","category":"type"}]
}
